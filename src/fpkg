#!/bin/bash
#
PKGDIR="$FPKG_ROOT/var/pkg"
GITDIR="$FPKG_ROOT/var/fpkg/git"
_CACHEDIR="$FPKG_ROOT/var/fpkg/cache"
_GIT_or_HTTPS="git"
_HTTPS_repo_file="repo*" 
# the standard should be decided by the user (NOTE: Repository repo file name split should be avoided, but it won't be just like linux package managers)
conf="$FPKG_ROOT/var/fpkg/conf"
# unsupported; use $conf instead.
#REPO="https://github.com/Ohio2/frepo.git"
_usesha=yes
_lock="/tmp/lock"
mlock=no
ask=yes
# 01.11.2022
# --- Start merging diffrent scripts into fpkg
#
# 05.11.2022
# --- Finished merging diffrent scripts into fpkg
if [[ -f $conf ]]; then
	. $conf 
	# may break fpkg if empty.
fi
# c:espkg
# # # # # # # # # # # # # # #
      # May go unused temporarily #
# # # # # # # # # # # # # # #
#function espkg(){
# PKGDIR="$FPKG_ROOT/pkg"
# buildopts=""
# case $1 in 
# 	--query|--list) if [ -f $PKGDIR/build-$1.sh ]; then echo "$1 from source"; fi ;;
# 	 *) while [ ! -z "$1" ]; do buildopts="$buildopts" $PKGDIR/build-$1.sh shift done ;; 
#  esac
#}
# # # # # # # # # # # # # # #
# End of unused code block  #
# # # # # # # # # # # # # # #
# c:shapkg
function shapkg(){
	$_shaviagit=$(openssl dgst -sha256 -r $1.sha256)
	$_shaviafile=$(openssl sha $1)
	if [ $_shaviagit = $_shaviafile ]
	        echo "$_shaviagit = $_shaviafile"
	else
	        echo "$_shaviagit != $_shaviafile"
	        echo "sha256 mismatch!"
	        echo "Error 4"
	        exit 4
	fi
	
}
# c:qpkg
function qpkg(){
	while [ ! -z "$1" ]; do 
	        version=$(find $PKGDIR -regex ".*/$1-[a-z.0-9]*.tar.zst" -type f -printf "%f\n" | sort -V | tail -n 1)
	
	        if [ "$version" = "" ]
	        then
	                echo "Package not found"
	                exit 1
	        else
	                version=${version##*-}
	                version=${version%.tar.zst}
	                echo $version
	        fi
	shift
	done
}
# c:lpkg
function lpkg(){
	#PKGDIR="$_PKGDIR"
	while [ ! -z "$1" ]; do
	        pkg_version=$(qpkg "$1")
	        if [ $? -ne 0 ]; then
	        then
	                echo "$1:$pkg_version"
	        exit 1
	        fi
	
	        zstd -qcd "$PKGDIR/$1-$pkg_version.tar.zst" | tar tf -
	shift
	done
}
# c:rpkg
function rpkg(){
	DESTDIR="${FPKG_ROOT}/"
	RC=0
	
	while [ ! -z "$1" ]; do
	
	        files=$(lpkg "$1" | tac -)
	        if [ $? -ne 0 ]
	        then
	                echo $files
	                exit 1
	        fi
	
	        cd "$DESTDIR"
	        for file in $files
	        do
	                if [ -d "$file" ]
	                then
	                        out=$(rmdir -v "$file" 2>&1)
	                        [ $? -eq 0 ] && echo $out
	                elif [ -e "$file" ]
	                then
	                        rm -vf "$file"
	                else
	                        echo "File $file not found."
	                        RC=1
	                fi
	        done
	
	        exit $RC
	shift
	done
}
# c:ipkg
function ipkg(){
	#PKGDIR="$FPKG_ROOT/var/pkg"
	DESTDIR="${FPKG_ROOT}/"
	
	while [ ! -z "$1" ]; do
	        pkg_version=$(qpkg "$1")
	        if [ $? -ne 0 ]
	        then
	                echo $pkg_version
	                exit 1
	        fi
	
	        cd "$DESTDIR"
	        zstd -qcd "$PKGDIR/$1-$pkg_version.tar.zst" | tar vxf - --same-owner
	shift
	done
	
}
# c:spkg
function spkg(){
	_fpkgignore="${GITDIR}/.fpkg-ignore"
	if [ "$#" -eq 0 ]; then
	        echo "No arguments supplied."
	        exit 0
	fi
	pushd
	while [ ! -z "$1" ]; do
	        if grep $1 "$_fpkgignore" 1>/dev/null 2>&1 ; then
	                exit 0
	        fi
	        find $GITDIR -regex ".*/$1-[a-z.0-9]*.tar.zst" -type f -printf "%f\n" | sort -V | tail -n 1
	
	        src=$(find $GITDIR -regex ".*/$1-[a-z.0-9]*.tar.zst" -type f -printf "%f\n" | sort -V | tail -n 1)
	
	                case $1 in
	                        --query) cp "$GITDIR/$src" $PKGDIR ; cp "$GITDIR/$1.d" ; qpkg "$1" ;;
	                        *) cp "$GITDIR/$src" $PKGDIR 
	                                if [ -f "$GITDIR/$1.d" ]; then
	                                        cp "$GITDIR/$1.d" $PKGDIR
	                                fi ;;
	                esac
	shift
	done
	
}
# c:upkg
function upkg(){
	DESTDIR="${FPKG_ROOT}/"
	TEMPDIR=$(mktemp -d)  
	
	while [ ! -z "$1" ]; do
	        version1=$(qpkg "$1")
	        version2=$( PKGDIR=$TEMPDIR spkg "$1" | PKGDIR=$TEMPDIR qpkg "$1")
	        if [ ! "$version1" = "$version2" ]; then
	                PKGDIR="${FPKG_ROOT}/pkg" ipkg "$1"
	        else
	                echo "Up to date"
	        fi
	shift
	done
}
# c:ask
function ask() {
	if [[ $ask == yes ]]; then
		echo -e "You are about to $1 $2\nAre you sure? [Y/n]"
		read $ans
		if [[ $ans == n ]] || [[ $ans == N ]]; then
			echo -e "User said no. Exitting."
			rm $lock
			exit 0
		fi
	fi
	
}
# c:hooks
function hooks(){
	HOOKSPATH="${FPKG_ROOT}/var/fpkg/hooks"
	mkdir -p $HOOKSPATH
	RUNAS="$1" $HOOKSPATH/* # Run hooks as $1
}
if [ -f $_lock ] && [ $_mlock == yes ]; then
	echo "Error 5, check if another fpkg PID is running"
	exit 5
fi
touch $_lock
if [ ! -d $_GITDIR ]; then
	case $_HTTPS_or_GIT in
		git) git clone $REPO $_GITDIR ;;
		https) curl -fLO --progress-bar $REPO/$_HTTPS_repo_file $_GITDIR ; tar -xf $_GITDIR/$_HTTPS_repo_file ; mv $_GITDIR/$_HTTPS_repo_file $_CACHEDIR ;;
	esac
fi
cd $_GITDIR
case $_HTTPS_or_GIT in
	git) git pull $_GITDIR ;;
	https) [[ $(curl $REPO -z $_HTTPS_repo_file -o $_CACHEDIR/$_HTTPS_repo_file) == 200 ]] && curl -fLO --progress-bar $REPO $_GITDIR && tar -xf $_GITDIR/$_HTTPS_repo_file && rm -rf $_GITDIR/$_HTTPS_repo_file || echo "No updates available." ;;
esac
cd $OLDPWD
if [ ! -d $_PKGDIR ]; then
	mkdir -pv $_PKGDIR
fi

case $1 in
	sha) while [ ! -z "$2" ]; do [ $_usesha = yes | $_usesha = true ]; mlock=$_mlock PKGDIR=$_PKGDIR shapkg "$2"; shift; done ;;
	i|install) while [ ! -z "$2" ]; do ask "install" "$2" ;  mlock=$_mlock PKGDIR=$_PKGDIR GITDIR=$_GITDIR spkg "$2" ; PKGDIR=$_PKGDIR ipkg "$2" ; PKGDIR=$_PKGDIR GITDIR=$_GITDIR spkg < $2.d ; PKGDIR=$_PKGDIR ipkg < $2.d ; shift; done ;;
	u|update) while [ ! -z "$2" ]; do ask "update" "the system" ;  mlock=$_mlock PKGDIR=$_PKGDIR GITDIR=$_GITDIR upkg "$(lpkg)"; shift; done ;;
	l|list) while [ ! -z "$2" ]; do mlock=$_mlock PKGDIR=$_PKGDIR lpkg "$2"; shift; done ;;
	q|query) while [ ! -z "$2" ]; do mlock=$_mlock PKGDIR=$_PKGDIR qpkg "$2"; shift; done ;;
	r|remove) while [ ! -z "$2" ]; do ask "remove" "$2" ; mlock=$_mlock PKGDIR=$_PKGDIR rpkg "$2"; shift; done ;;
	s|sync) while [ ! -z "$2" ]; do mlock=$_mlock  PKGDIR=$_PKGDIR GITDIR=$_GITDIR spkg "$2"; shift; done ;;
	c|create|src|compile|make|source) mlock=$_mlock PKGDIR=$_PKGDIR cpkg "$2" "$3" "$4" ;;
	sq|syncquery) while [ ! -z "$2" ]; do mlock=$_mlock PKGDIR=$_PKGDIR GITDIR=$_GITDIR spkg --query "$2" ; shift ; done ;;
	h|help) echo -e "i|install) install package\nu|update) update the system\nl|list) list package\nq|query) query package\ns|sync) copy over package file into pkgdir from the git repo (gitdir)\nc|create) make a package\nsq|syncquery) sync + query\n\n\n ERRORS:\n\n2 - probably something wrong with the scripts\n\n4 - SHA mismatch\n\n5 - if $_mlock=no then lock file exists";;
	*) echo "Invalid option." ;;
esac
rm $_lock
